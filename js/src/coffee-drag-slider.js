// Generated by CoffeeScript 1.7.1
(function() {
  var $, Slider,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.sliders = {};

  $ = window.jQuery;

  Slider = (function() {
    function Slider(sliderId, config) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      this.sliderId = sliderId;
      if (config == null) {
        config = {};
      }
      this.dragg = __bind(this.dragg, this);
      this.settings = {
        cycle: (_ref = config.cycle) != null ? _ref : true,
        navigator: (_ref1 = config.navigator) != null ? _ref1 : true,
        navigatorEvents: (_ref2 = config.navigatorEvents) != null ? _ref2 : false,
        duration: (_ref3 = config.duration) != null ? _ref3 : 1,
        emmitEvents: (_ref4 = config.emmitEvents) != null ? _ref4 : false,
        draggable: (_ref5 = config.draggable) != null ? _ref5 : true,
        centerImages: (_ref6 = config.centerImages) != null ? _ref6 : true
      };
      this.$sliderViewport = $('#' + sliderId);
      this.$slider = $(this.$sliderViewport.children('.slider'));
      this.$sliderItems = $(this.$slider.children('li'));
      this.$sliderPrevBtn = $(this.$sliderViewport.children('.prevBtn'));
      this.$sliderNextBtn = $(this.$sliderViewport.children('.nextBtn'));
      if (this.settings.preventLinksOnDrag) {
        this.$sliderLinks = this.$sliderItems.children().children();
      }
      this.setSlider();
      this.index = 0;
      this.slideToPos = 0;
      this.draggedEl = null;
      this.hasLimitClass = false;
      this.setListeners();
    }

    Slider.prototype.setListeners = function() {
      this.$sliderPrevBtn.click((function(_this) {
        return function(e) {
          e.stopPropagation();
          return _this.slideTo('prev');
        };
      })(this));
      this.$sliderNextBtn.click((function(_this) {
        return function(e) {
          e.stopPropagation();
          return _this.slideTo('next');
        };
      })(this));
      this.$sliderNavBtns.mousedown((function(_this) {
        return function(e) {
          var index;
          e.stopPropagation();
          index = $(e.currentTarget).index();
          return _this.slideTo(index);
        };
      })(this));
      if (this.settings.draggable) {
        this.$sliderViewport.on('mousedown', (function(_this) {
          return function(e) {
            e.stopPropagation();
            e.preventDefault();
            _this.draggedEl = e.currentTarget;
            _this.dragStart(e.pageX);
            return null;
          };
        })(this));
        this.$sliderViewport.on('touchstart', (function(_this) {
          return function(e) {
            var x;
            e = e.originalEvent;
            x = e.touches[0].pageX;
            _this.draggedEl = e.currentTarget;
            _this.dragStart(x, 'touchmove');
            return null;
          };
        })(this));
        $(document).on('mouseup', (function(_this) {
          return function(e) {
            e.stopPropagation();
            e.preventDefault();
            return _this.dragEnd(e.pageX);
          };
        })(this));
        this.$sliderViewport.on('touchend', (function(_this) {
          return function(e) {
            var x;
            x = e.originalEvent.touches[0].pageX;
            return _this.dragEnd(x);
          };
        })(this));
      }
      return $(window).resize((function(_this) {
        return function() {
          return setTimeout(function() {
            return _this.setSlider();
          }, 1);
        };
      })(this));
    };

    Slider.prototype.addNavigator = function() {
      var i, navigatorHtml, _i, _ref;
      navigatorHtml = '<ul class="navigator">';
      navigatorHtml += '<li class="navBullet selectedBullet"></li>';
      for (i = _i = 1, _ref = this.elementsQ; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
        navigatorHtml += '<li class="navBullet"></li>';
      }
      navigatorHtml += '</ul>';
      return this.$sliderNavBtns = this.$sliderViewport.append(navigatorHtml).children('.navigator').children();
    };

    Slider.prototype.addLoader = function($el) {
      var loaderHtml;
      loaderHtml = '<div class="progress"><div></div></div>';
      return $el.append(loaderHtml);
    };

    Slider.prototype.removeLoader = function($el) {
      return $el.find('.progress').remove();
    };

    Slider.prototype.setSlider = function() {
      var sliderItemWidth;
      this.viewPortWidth = this.$sliderViewport.width();
      this.elementsQ = this.$sliderItems.length;
      this.sliderWidth = this.elementsQ * 100;
      this.percentageStep = sliderItemWidth = 100 / this.elementsQ;
      this.rightLimit = (this.viewPortWidth * this.elementsQ) - this.viewPortWidth;
      this.$sliderItems.css('width', "" + sliderItemWidth + "%");
      this.$slider.css({
        'width': "" + this.sliderWidth + "%",
        'transition-duration': "" + this.settings.duration + "s"
      });
      this.setImages();
      if (this.$sliderNavBtns == null) {
        return this.addNavigator();
      }
    };

    Slider.prototype.setImages = function() {
      var _self;
      _self = this;
      this.$sliderItems.each(function() {
        var $el;
        $el = $(this);
        return _self.addLoader($el);
      });
      return this.setImage();
    };

    Slider.prototype.setImage = function(index) {
      var $childImg, $el, src;
      if (index == null) {
        index = 0;
      }
      if (index < this.$sliderItems.length) {
        $el = $(this.$sliderItems.get(index));
        $childImg = $($el.find('img'));
        src = $childImg.data('src');
        $childImg.attr('src', src).css('display', 'none');
        return $childImg.load((function(_this) {
          return function() {
            if (_this.settings.centerImages) {
              _this.centerImage($childImg);
            }
            $childImg.css('display', 'block');
            _this.removeLoader($el);
            return _this.setImage(++index);
          };
        })(this));
      }
    };

    Slider.prototype.centerImage = function($img) {
      var leftOffset, topOffset;
      leftOffset = -$img.outerWidth() / 2 + 'px';
      topOffset = -$img.outerHeight() / 2 + 'px';
      return $img.css({
        'margin-top': topOffset,
        'margin-left': leftOffset
      });
    };

    Slider.prototype.dragStart = function(startX, inputEvent) {
      var $el, dragPos, slideToPos;
      if (inputEvent == null) {
        inputEvent = 'mousemove';
      }
      $el = $(this.draggedEl);
      this.dragStartX = startX;
      slideToPos = this.$slider.position().left;
      dragPos = (slideToPos / this.viewPortWidth) * 100;
      this.$slider.css({
        'transition-duration': '0s'
      });
      return $el.on(inputEvent, (function(_this) {
        return function(ev) {
          var x;
          ev = ev.originalEvent;
          x = inputEvent === 'mousemove' ? ev.pageX : ev.touches[0].pageX;
          return _this.dragg(startX, x, slideToPos);
        };
      })(this));
    };

    Slider.prototype.dragg = function(startX, currentX, slideToPos) {
      var dragPos, offsetX;
      offsetX = startX - currentX;
      slideToPos -= offsetX;
      if (slideToPos >= 0) {
        slideToPos = 0;
        this.isOutBounds = true;
        this.dragStartX = currentX;
        if (!this.hasLimitClass) {
          this.$sliderViewport.addClass('onLeftLimit');
          this.hasLimitClass = true;
        }
      } else if (slideToPos <= -this.rightLimit) {
        slideToPos = -this.rightLimit;
        this.isOutBounds = true;
        this.dragStartX = currentX;
        if (!this.hasLimitClass) {
          this.$sliderViewport.addClass('onRightLimit');
          this.hasLimitClass = true;
        }
      }
      dragPos = (slideToPos / this.viewPortWidth) * 100;
      dragPos = dragPos * (this.percentageStep / 100);
      this.$slider.css('transform', "translate3d(" + dragPos + "%, 0, 0)");
      this.isOutBounds = false;
      return null;
    };

    Slider.prototype.dragEnd = function(currentX) {
      var minToAction, offsetPercentage, offsetX, tempIndex;
      if (this.draggedEl || this.clicked) {
        console.log('drag end event fired for ' + this.sliderId);
        console.log(this.draggedEl);
        if (this.hasLimitClass) {
          this.$sliderViewport.removeClass('onLeftLimit onRightLimit');
          this.hasLimitClass = false;
        }
        offsetX = this.dragStartX - currentX;
        offsetPercentage = Math.abs(offsetX / this.viewPortWidth);
        minToAction = 0.1;
        if (offsetPercentage < minToAction) {
          offsetPercentage = 0;
        }
        if (offsetX > 0 && !this.isOutBounds) {
          console.log("Dragued-> right");
          tempIndex = this.index + Math.ceil(offsetPercentage);
        } else if (offsetX < 0 && !this.isOutBounds) {
          console.log("Dragued-> left");
          tempIndex = this.index - Math.ceil(offsetPercentage);
        } else {
          console.log("Didn't move, or at least not much");
          tempIndex = this.index;
        }
        console.log("tempIndex:" + tempIndex);
        this.slideTo(tempIndex);
        $(this.draggedEl).off('mousemove');
        this.draggedEl = null;
        console.log(this.draggedEl);
        return false;
      }
    };


    /*
     * Moves the slider to the prev, next, or an specific position based on the command argument
     * @param {string}|{integer} command
     * @return {void}
     */

    Slider.prototype.slideTo = function(command) {
      var err, lastIndx, slideToPos;
      this.clicked = null;
      console.log('slideTo Called with argument:' + command);
      switch (command) {
        case 'next':
          this.index++;
          break;
        case 'prev':
          this.index--;
          break;
        case 'first':
          this.index = 0;
          break;
        case 'last':
          this.index = this.elementsQ - 1;
          break;
        default:
          if (isFinite(command)) {
            this.index = command;
          } else {
            err = 'Please provide a valid command for the slider [prev,next or a valid index]';
            console.error(err);
            return false;
          }
      }
      lastIndx = this.elementsQ - 1;
      if (this.index > lastIndx) {
        if (this.settings.cycle) {
          this.index = 0;
        } else {
          this.index = lastIndx;
          return false;
        }
      } else if (this.index < 0) {
        if (this.settings.cycle) {
          this.index = lastIndx;
        } else {
          this.index = 0;
          return false;
        }
      }
      console.log('index:' + this.index);
      slideToPos = -1 * (this.index * this.percentageStep);
      if (this.settings.navigator) {
        this.$sliderNavBtns.removeClass('selectedBullet');
        $(this.$sliderNavBtns[this.index]).addClass('selectedBullet');
      }
      this.$slider.css({
        'transform': "translate3d(" + slideToPos + "%, 0, 0)",
        'transition-duration': "" + this.settings.duration + "s"
      });
      if (this.settings.emmitEvents) {
        return $.event.trigger('onSlide', [this.index, this.sliderId]);
      }
    };

    return Slider;

  })();

  $(function() {
    return sliders.main = new Slider('mainSlider');
  });

}).call(this);

//# sourceMappingURL=coffee-drag-slider.map
