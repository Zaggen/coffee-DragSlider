// Generated by CoffeeScript 1.9.3
(function() {
  var $, Slider, defaults,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.sliders = {};

  $ = window.jQuery;

  defaults = {
    slideShow: false,
    cycle: true,
    useNavigator: true,
    addNavigator: true,
    navigatorEvents: false,
    addBtns: true,
    autoHideBtns: true,
    duration: 1,
    emmitEvents: false,
    draggable: true
  };

  Slider = (function() {
    function Slider(slider) {
      this._drag = bind(this._drag, this);
      var config;
      this.$el = $(slider);
      this.$sliderViewport = $(this.$el.find('.sliderViewport'));
      this.$sliderTrack = $(this.$sliderViewport.children('.sliderTrack'));
      this.$sliderTrackItems = $(this.$sliderTrack.children('li'));
      this.$sliderPrevBtn = $(this.$sliderViewport.children('.prevBtn'));
      this.$sliderNextBtn = $(this.$sliderViewport.children('.nextBtn'));
      config = this.$el.data('slider');
      this.settings = $.extend({}, defaults, config);
      if (this.settings.preventLinksOnDrag) {
        this.$sliderTrackLinks = this.$sliderTrackItems.children().children();
      }
      this._setSlider();
      this.index = 0;
      this.slideToPos = 0;
      this._draggedEl = null;
      this.hasLimitClass = false;
      this.slideTo(0);
      this.setListeners();
    }

    Slider.prototype.setListeners = function() {
      this.$sliderPrevBtn.click((function(_this) {
        return function(e) {
          e.stopPropagation();
          return _this.slideTo('prev');
        };
      })(this));
      this.$sliderNextBtn.click((function(_this) {
        return function(e) {
          e.stopPropagation();
          return _this.slideTo('next');
        };
      })(this));
      if (this.settings.slideShow) {
        setInterval((function(_this) {
          return function() {
            return _this.slideTo('next');
          };
        })(this), 12000);
      }
      this.$navigator.on('mousedown', 'li', (function(_this) {
        return function(e) {
          var index;
          e.stopPropagation();
          index = $(e.currentTarget).index();
          return _this.slideTo(index);
        };
      })(this));
      if (this.settings.draggable) {
        this.$sliderViewport.on('mousedown', (function(_this) {
          return function(e) {
            e.stopPropagation();
            e.preventDefault();
            _this._draggedEl = e.currentTarget;
            _this._dragStart(e.pageX);
            return null;
          };
        })(this));
        this.$sliderViewport.on('touchstart', (function(_this) {
          return function(e) {
            var x;
            e = e.originalEvent;
            x = e.touches[0].pageX;
            _this._draggedEl = e.currentTarget;
            _this._dragStart(x, 'touchmove');
            return null;
          };
        })(this));
        $(document).on('mouseup', (function(_this) {
          return function(e) {
            e.stopPropagation();
            e.preventDefault();
            return _this._dragEnd(e.pageX);
          };
        })(this));
        this.$sliderViewport.on('touchend', (function(_this) {
          return function(e) {
            var x;
            x = e.originalEvent.touches[0].pageX;
            return _this._dragEnd(x);
          };
        })(this));
      }
      return $(window).resize((function(_this) {
        return function() {
          return setTimeout(function() {
            return _this._setSlider();
          }, 1);
        };
      })(this));
    };

    Slider.prototype._buildNavigator = function() {
      var i, j, navigatorHtml, ref;
      navigatorHtml = '<ul class="navigator">';
      navigatorHtml += '<li class="navBullet selectedBullet"></li>';
      for (i = j = 1, ref = this.elementsQ; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
        navigatorHtml += '<li class="navBullet"></li>';
      }
      navigatorHtml += '</ul>';
      return this.$sliderViewport.append(navigatorHtml);
    };

    Slider.prototype._addBtns = function() {
      var btnsHtml;
      btnsHtml = '<div class="sliderBtn prevBtn"><i class="fa fa-angle-left"></i></div>';
      btnsHtml += '<div class="sliderBtn nextBtn"><i class="fa fa-angle-right"></i></div>';
      this.$sliderViewport.prepend(btnsHtml);
      this.$sliderPrevBtn = $(this.$sliderViewport.children('.prevBtn'));
      return this.$sliderNextBtn = $(this.$sliderViewport.children('.nextBtn'));
    };

    Slider.prototype._addLoader = function($el) {
      var loaderHtml;
      loaderHtml = '<div class="progress"><div></div></div>';
      return $el.append(loaderHtml);
    };

    Slider.prototype._removeLoader = function($el) {
      return $el.find('.progress').remove();
    };

    Slider.prototype._setSlider = function() {
      var sliderTrackItemWidth;
      this.viewPortWidth = this.$sliderViewport.width();
      this.elementsQ = this.$sliderTrackItems.length;
      this.sliderWidth = this.elementsQ * 100;
      this.percentageStep = sliderTrackItemWidth = 100 / this.elementsQ;
      this.rightLimit = (this.viewPortWidth * this.elementsQ) - this.viewPortWidth;
      this.$sliderTrackItems.css('width', sliderTrackItemWidth + "%");
      this.$sliderTrack.css({
        'width': this.sliderWidth + "%",
        'transition-duration': this.settings.duration + "s"
      });
      this._lazyLoadImages();
      if (this.settings.addBtns) {
        this._addBtns();
      }
      if (!this.settings.autoHideBtns) {
        this.$sliderPrevBtn.css('opacity', '1');
        this.$sliderNextBtn.css('opacity', '1');
      }
      if (this.$navigator == null) {
        if (this.settings.addNavigator) {
          this._buildNavigator();
        }
        if (this.settings.useNavigator) {
          return this.$navigator = $(this.$el.find('.navigator'));
        }
      }
    };

    Slider.prototype._lazyLoadImages = function() {
      var imagesToLazyLoad;
      imagesToLazyLoad = this.$sliderTrack.find('img[data-src]');
      return this._lazyLoadImage(imagesToLazyLoad, 0);
    };

    Slider.prototype._lazyLoadImage = function(images, index) {
      var $img, $slide, src;
      if (index <= images.length) {
        $img = $(images[index]);
        src = $img.data('src');
        $slide = $($img.parent());
        $img.one('load', (function(_this) {
          return function() {
            $img.css('display', 'block');
            _this._lazyLoadImage(images, ++index);
            return _this._removeLoader($slide);
          };
        })(this));
        this._addLoader($slide);
        return $img.attr('src', src).css('display', 'none');
      }
    };

    Slider.prototype._addLoader = function($el) {
      var loaderHtml;
      loaderHtml = '<div class="progress"><div></div></div>';
      return $el.append(loaderHtml);
    };

    Slider.prototype._removeLoader = function($el) {
      return $el.find('.progress').remove();
    };

    Slider.prototype._dragStart = function(startX, inputEvent) {
      var $el, slideToPos;
      if (inputEvent == null) {
        inputEvent = 'mousemove';
      }
      $el = $(this._draggedEl);
      this._dragStartX = startX;
      slideToPos = this.$sliderTrack.position().left;
      this.$sliderTrack.css({
        'transition-duration': '0s'
      });
      return $el.on(inputEvent, (function(_this) {
        return function(ev) {
          var x;
          ev = ev.originalEvent;
          x = inputEvent === 'mousemove' ? ev.pageX : ev.touches[0].pageX;
          return _this._drag(startX, x, slideToPos);
        };
      })(this));
    };

    Slider.prototype._drag = function(startX, currentX, slideToPos) {
      var dragPos, offsetX;
      offsetX = startX - currentX;
      slideToPos -= offsetX;
      if (slideToPos >= 0) {
        slideToPos = 0;
        this.isOutBounds = true;
        this._dragStartX = currentX;
        if (!this.hasLimitClass) {
          this.$sliderViewport.addClass('onLeftLimit');
          this.hasLimitClass = true;
        }
      } else if (slideToPos <= -this.rightLimit) {
        slideToPos = -this.rightLimit;
        this.isOutBounds = true;
        this._dragStartX = currentX;
        if (!this.hasLimitClass) {
          this.$sliderViewport.addClass('onRightLimit');
          this.hasLimitClass = true;
        }
      }
      dragPos = (slideToPos / this.viewPortWidth) * 100;
      dragPos = dragPos * (this.percentageStep / 100);
      this.$sliderTrack.css('transform', "translate3d(" + dragPos + "%, 0, 0)");
      this.isOutBounds = false;
      return null;
    };

    Slider.prototype._dragEnd = function(currentX) {
      var minToAction, offsetPercentage, offsetX, tempIndex;
      if (this._draggedEl || this.clicked) {
        console.log(this._draggedEl);
        if (this.hasLimitClass) {
          this.$sliderViewport.removeClass('onLeftLimit onRightLimit');
          this.hasLimitClass = false;
        }
        offsetX = this._dragStartX - currentX;
        offsetPercentage = Math.abs(offsetX / this.viewPortWidth);
        minToAction = 0.1;
        if (offsetPercentage < minToAction) {
          offsetPercentage = 0;
        }
        if (offsetX > 0 && !this.isOutBounds) {
          console.log("Dragued-> right");
          tempIndex = this.index + Math.ceil(offsetPercentage);
        } else if (offsetX < 0 && !this.isOutBounds) {
          console.log("Dragued-> left");
          tempIndex = this.index - Math.ceil(offsetPercentage);
        } else {
          tempIndex = this.index;
        }
        this.slideTo(tempIndex);
        $(this._draggedEl).off('mousemove');
        this._draggedEl = null;
        console.log(this._draggedEl);
        return false;
      }
    };


    /*
     * Moves the sliderTrack to the prev, next, or an specific position based on the command argument
     * @param {string}|{integer} command
     * @return {void}
     */

    Slider.prototype.slideTo = function(command) {
      var err, index, lastIndx, slideToPos;
      this.clicked = null;
      switch (command) {
        case 'next':
          this.index++;
          break;
        case 'prev':
          this.index--;
          break;
        case 'first':
          this.index = 0;
          break;
        case 'last':
          this.index = this.elementsQ - 1;
          break;
        default:
          if (isFinite(command)) {
            this.index = command;
          } else {
            err = 'Please provide a valid command for the slider [prev,next or a valid index]';
            console.error(err);
            return false;
          }
      }
      lastIndx = this.elementsQ - 1;
      if (this.index > lastIndx) {
        if (this.settings.cycle) {
          this.index = 0;
        } else {
          this.index = lastIndx;
          return false;
        }
      } else if (this.index < 0) {
        if (this.settings.cycle) {
          this.index = lastIndx;
        } else {
          this.index = 0;
          return false;
        }
      }
      slideToPos = -1 * (this.index * this.percentageStep);
      index = this.index;
      if (this.$navigator != null) {
        this.$navigator.each(function() {
          var $childrens;
          $childrens = $($(this).children());
          $childrens.removeClass('selected');
          return $($childrens[index]).addClass('selected');
        });
      }
      this.$sliderTrack.css({
        'transform': "translate3d(" + slideToPos + "%, 0, 0)",
        'transition-duration': this.settings.duration + "s"
      });
      if (this.settings.emmitEvents) {
        return $.event.trigger('onSlide', [this.index]);
      }
    };

    return Slider;

  })();

  $(function() {
    window.sliders = [];
    return $('.slider').each(function() {
      return sliders.push(new Slider(this));
    });
  });

}).call(this);

//# sourceMappingURL=coffee-drag-slider.js.map
